//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Ho/Test/AndriodTestInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AndriodTestInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AndriodTestInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AndriodTestInput"",
    ""maps"": [
        {
            ""name"": ""PhoneInput"",
            ""id"": ""90a6e3d6-ad9c-455e-8603-53ef8471ba13"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""8416de90-756c-4e45-a120-b5edd88fb06d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d1de0d09-294e-4116-b9d0-269d38e21de1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""163a0015-5c54-485e-9375-c3266cfbec30"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc5f8e30-e757-43f1-985d-684445a29a6a"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PhoneInput
        m_PhoneInput = asset.FindActionMap("PhoneInput", throwIfNotFound: true);
        m_PhoneInput_Press = m_PhoneInput.FindAction("Press", throwIfNotFound: true);
        m_PhoneInput_PressPosition = m_PhoneInput.FindAction("PressPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PhoneInput
    private readonly InputActionMap m_PhoneInput;
    private IPhoneInputActions m_PhoneInputActionsCallbackInterface;
    private readonly InputAction m_PhoneInput_Press;
    private readonly InputAction m_PhoneInput_PressPosition;
    public struct PhoneInputActions
    {
        private @AndriodTestInput m_Wrapper;
        public PhoneInputActions(@AndriodTestInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_PhoneInput_Press;
        public InputAction @PressPosition => m_Wrapper.m_PhoneInput_PressPosition;
        public InputActionMap Get() { return m_Wrapper.m_PhoneInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhoneInputActions set) { return set.Get(); }
        public void SetCallbacks(IPhoneInputActions instance)
        {
            if (m_Wrapper.m_PhoneInputActionsCallbackInterface != null)
            {
                @Press.started -= m_Wrapper.m_PhoneInputActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_PhoneInputActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_PhoneInputActionsCallbackInterface.OnPress;
                @PressPosition.started -= m_Wrapper.m_PhoneInputActionsCallbackInterface.OnPressPosition;
                @PressPosition.performed -= m_Wrapper.m_PhoneInputActionsCallbackInterface.OnPressPosition;
                @PressPosition.canceled -= m_Wrapper.m_PhoneInputActionsCallbackInterface.OnPressPosition;
            }
            m_Wrapper.m_PhoneInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @PressPosition.started += instance.OnPressPosition;
                @PressPosition.performed += instance.OnPressPosition;
                @PressPosition.canceled += instance.OnPressPosition;
            }
        }
    }
    public PhoneInputActions @PhoneInput => new PhoneInputActions(this);
    public interface IPhoneInputActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnPressPosition(InputAction.CallbackContext context);
    }
}
